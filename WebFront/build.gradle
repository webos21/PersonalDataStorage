buildscript {
  repositories {
    mavenCentral()
    maven {
      url "https://plugins.gradle.org/m2/"
    }
  }
  dependencies {
    classpath 'com.github.node-gradle:gradle-node-plugin:7.1.0'
  }
}

plugins {
  id "com.github.node-gradle.node" version "7.1.0"
}

apply plugin: 'base'
apply plugin: 'com.github.node-gradle.node'

node {
  /* gradle-node-plugin configuration
   https://github.com/srs/gradle-node-plugin/blob/master/docs/node.md
   Task name pattern:
   ./gradlew npm_<command> Executes an NPM command.
  */

  // Version of node to use.
  version = "18.12.0"

  // Version of npm to use.
  npmVersion = '10.2.5'

  // If true, it will download node using above parameters.
  // If false, it will try to use globally installed node.
  download = false
}

npm_run_build {
  // make sure the build task is executed only when appropriate files change
  inputs.files fileTree("public")
  inputs.files fileTree("src")

  // 'node_modules' appeared not reliable for dependency change detection (the task was rerun without changes)
  // though 'package.json' and 'package-lock.json' should be enough anyway
  inputs.file 'package.json'
  inputs.file 'package-lock.json'

  outputs.dir 'dist'
}

// pack output of the build into JAR file
tasks.register('packageNpmApp', Zip) {
  dependsOn npm_run_build
  archiveBaseName = 'npm-app'
  archiveExtension = 'jar'
  destinationDirectory = file("${projectDir}/build_packageNpmApp")
  from('dist') {
    // optional path under which output will be visible in Java classpath, e.g. static resources path
    into 'assets/static'
  }
}

// declare a dedicated scope for publishing the packaged JAR
configurations {
  npmResources
}
configurations.default.extendsFrom(configurations.npmResources)

// expose the artifact created by the packaging task
artifacts {
  npmResources(packageNpmApp.archivePath) {
    builtBy packageNpmApp
    type 'jar'
  }
}

assemble.dependsOn packageNpmApp

String testsExecutedMarkerName = "${projectDir}/.tests.executed"

tasks.register('test', NpmTask) {
  dependsOn assemble

  args = ['run', 'test']

  inputs.files fileTree('src')
  inputs.file 'package.json'
  inputs.file 'package-lock.json'

  // allows easy triggering re-tests
  doLast {
    new File(testsExecutedMarkerName).text = 'delete this file to force re-execution JavaScript tests'
  }
  outputs.file testsExecutedMarkerName
}

check.dependsOn test

clean {
  delete packageNpmApp.archivePath
  delete testsExecutedMarkerName
}

